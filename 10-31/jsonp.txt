很简单，就是利用<script>标签没有跨域限制的“漏洞”（历史遗迹啊）来达到与第三方通讯的目的。
当需要通讯时，本站脚本创建一个<script>元素，地址指向第三方的API网址，形如： 
<script src="http://www.example.net/api?param1=1&param2=2"></script>  

并提供一个回调函数来接收数据（函数名可约定，或通过地址参数传递）。
function callback(result)
        {
            var html = '<ul>';
            for(var i = 0; i < result.length; i++)
            {
                html += '<li>' + result[i] + '</li>';
            }
            html += '</ul>';
            document.getElementById('divCustomers').innerHTML = html;
        }


第三方产生的响应为json数据的包装（故称之为jsonp，即json padding），
形如：     callback({"name":"hax","gender":"Male"})    

这样浏览器会调用callback函数，并传递解析后json对象作为参数。
本站脚本可在callback函数里处理所传入的数据。   
补充：“历史遗迹”的意思就是，如果在今天重新设计的话，也许就不会允许这样简单的跨域了嘿，比如可能像XHR一样按照CORS规范要求服务器发送特定的http头


jq 实现跨域
$.getJSON("http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?", function(data) {
    
    var html = '<ul>';
    for(var i = 0; i < data.length; i++)
    {
        html += '<li>' + data[i] + '</li>';
    }
    html += '</ul>';
    
    $('#divCustomers').html(html); 
});
